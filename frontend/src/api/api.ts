/* tslint:disable */
/* eslint-disable */
/**
 * IntTest configurator
 * idk what to write here it\'s just a swagger
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiErrResponse
 */
export interface ApiErrResponse {
    /**
     * 
     * @type {string}
     * @memberof ApiErrResponse
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiErrResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthAuthRequest
 */
export interface ConfiguratorInternalApiAuthAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthAuthRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthAuthRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthCreateUserRequest
 */
export interface ConfiguratorInternalApiAuthCreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthCreateUserRequest
     */
    'password'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfiguratorInternalApiAuthCreateUserRequest
     */
    'role_ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthCreateUserRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthCreateUserResponse
 */
export interface ConfiguratorInternalApiAuthCreateUserResponse {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthCreateUserResponse
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfiguratorInternalApiAuthCreateUserResponse
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthListPermResponseItem
 */
export interface ConfiguratorInternalApiAuthListPermResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthListPermResponseItem
     */
    'desc'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfiguratorInternalApiAuthListPermResponseItem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthListPermResponseItem
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthListRoleResponseItem
 */
export interface ConfiguratorInternalApiAuthListRoleResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthListRoleResponseItem
     */
    'desc'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfiguratorInternalApiAuthListRoleResponseItem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthListRoleResponseItem
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfiguratorInternalApiAuthListRoleResponseItem
     */
    'perm_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthListUsersResponseItem
 */
export interface ConfiguratorInternalApiAuthListUsersResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthListUsersResponseItem
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfiguratorInternalApiAuthListUsersResponseItem
     */
    'id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfiguratorInternalApiAuthListUsersResponseItem
     */
    'role_ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthListUsersResponseItem
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthRoleCreateRequest
 */
export interface ConfiguratorInternalApiAuthRoleCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthRoleCreateRequest
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthRoleCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfiguratorInternalApiAuthRoleCreateRequest
     */
    'perm_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthRoleCreateResponse
 */
export interface ConfiguratorInternalApiAuthRoleCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof ConfiguratorInternalApiAuthRoleCreateResponse
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthUpdateRoleRequest
 */
export interface ConfiguratorInternalApiAuthUpdateRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthUpdateRoleRequest
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthUpdateRoleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfiguratorInternalApiAuthUpdateRoleRequest
     */
    'perm_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ConfiguratorInternalApiAuthUpdateUserRequest
 */
export interface ConfiguratorInternalApiAuthUpdateUserRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof ConfiguratorInternalApiAuthUpdateUserRequest
     */
    'role_ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ConfiguratorInternalApiAuthUpdateUserRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface InternalApiAuthAuthRequest
 */
export interface InternalApiAuthAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthAuthRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthAuthRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface InternalApiAuthCreateUserRequest
 */
export interface InternalApiAuthCreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthCreateUserRequest
     */
    'password'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof InternalApiAuthCreateUserRequest
     */
    'role_ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthCreateUserRequest
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface InternalApiAuthCreateUserResponse
 */
export interface InternalApiAuthCreateUserResponse {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthCreateUserResponse
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof InternalApiAuthCreateUserResponse
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface InternalApiAuthListPermResponseItem
 */
export interface InternalApiAuthListPermResponseItem {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthListPermResponseItem
     */
    'desc'?: string;
    /**
     * 
     * @type {number}
     * @memberof InternalApiAuthListPermResponseItem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthListPermResponseItem
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface InternalApiAuthListRoleResponseItem
 */
export interface InternalApiAuthListRoleResponseItem {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthListRoleResponseItem
     */
    'desc'?: string;
    /**
     * 
     * @type {number}
     * @memberof InternalApiAuthListRoleResponseItem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthListRoleResponseItem
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof InternalApiAuthListRoleResponseItem
     */
    'perm_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface InternalApiAuthListUsersResponseItem
 */
export interface InternalApiAuthListUsersResponseItem {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthListUsersResponseItem
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof InternalApiAuthListUsersResponseItem
     */
    'id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof InternalApiAuthListUsersResponseItem
     */
    'role_ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthListUsersResponseItem
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface InternalApiAuthRoleCreateRequest
 */
export interface InternalApiAuthRoleCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthRoleCreateRequest
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthRoleCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof InternalApiAuthRoleCreateRequest
     */
    'perm_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface InternalApiAuthRoleCreateResponse
 */
export interface InternalApiAuthRoleCreateResponse {
    /**
     * 
     * @type {number}
     * @memberof InternalApiAuthRoleCreateResponse
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface InternalApiAuthUpdateRoleRequest
 */
export interface InternalApiAuthUpdateRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthUpdateRoleRequest
     */
    'desc'?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthUpdateRoleRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof InternalApiAuthUpdateRoleRequest
     */
    'perm_ids'?: Array<number>;
}
/**
 * 
 * @export
 * @interface InternalApiAuthUpdateUserRequest
 */
export interface InternalApiAuthUpdateUserRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof InternalApiAuthUpdateUserRequest
     */
    'role_ids'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof InternalApiAuthUpdateUserRequest
     */
    'username'?: string;
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create user
         * @param {ConfiguratorInternalApiAuthAuthRequest} form login/pass form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: async (form: ConfiguratorInternalApiAuthAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('auth', 'form', form)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create role
         * @param {ConfiguratorInternalApiAuthRoleCreateRequest} form create role form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (form: ConfiguratorInternalApiAuthRoleCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('createRole', 'form', form)
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create user
         * @param {ConfiguratorInternalApiAuthCreateUserRequest} form create user request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (form: ConfiguratorInternalApiAuthCreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'form' is not null or undefined
            assertParamExists('createUser', 'form', form)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete role
         * @param {number} id id of a role to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRole', 'id', id)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete user
         * @param {number} id id of a user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list all the perms in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPerms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/perms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list all the roles in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update role
         * @param {number} id id of a role to update
         * @param {ConfiguratorInternalApiAuthUpdateRoleRequest} form new role data to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (id: number, form: ConfiguratorInternalApiAuthUpdateRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRole', 'id', id)
            // verify required parameter 'form' is not null or undefined
            assertParamExists('updateRole', 'form', form)
            const localVarPath = `/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update user
         * @param {number} id id of a user to update
         * @param {ConfiguratorInternalApiAuthUpdateUserRequest} form create user request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, form: ConfiguratorInternalApiAuthUpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'form' is not null or undefined
            assertParamExists('updateUser', 'form', form)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(form, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary create user
         * @param {ConfiguratorInternalApiAuthAuthRequest} form login/pass form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auth(form: ConfiguratorInternalApiAuthAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auth(form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create role
         * @param {ConfiguratorInternalApiAuthRoleCreateRequest} form create role form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(form: ConfiguratorInternalApiAuthRoleCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfiguratorInternalApiAuthRoleCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create user
         * @param {ConfiguratorInternalApiAuthCreateUserRequest} form create user request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(form: ConfiguratorInternalApiAuthCreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfiguratorInternalApiAuthCreateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete role
         * @param {number} id id of a role to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete user
         * @param {number} id id of a user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary list all the perms in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPerms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfiguratorInternalApiAuthListPermResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPerms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary list all the roles in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfiguratorInternalApiAuthListRoleResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfiguratorInternalApiAuthListUsersResponseItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update role
         * @param {number} id id of a role to update
         * @param {ConfiguratorInternalApiAuthUpdateRoleRequest} form new role data to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(id: number, form: ConfiguratorInternalApiAuthUpdateRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(id, form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update user
         * @param {number} id id of a user to update
         * @param {ConfiguratorInternalApiAuthUpdateUserRequest} form create user request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, form: ConfiguratorInternalApiAuthUpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, form, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary create user
         * @param {ConfiguratorInternalApiAuthAuthRequest} form login/pass form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(form: ConfiguratorInternalApiAuthAuthRequest, options?: any): AxiosPromise<object> {
            return localVarFp.auth(form, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create role
         * @param {ConfiguratorInternalApiAuthRoleCreateRequest} form create role form
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(form: ConfiguratorInternalApiAuthRoleCreateRequest, options?: any): AxiosPromise<ConfiguratorInternalApiAuthRoleCreateResponse> {
            return localVarFp.createRole(form, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create user
         * @param {ConfiguratorInternalApiAuthCreateUserRequest} form create user request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(form: ConfiguratorInternalApiAuthCreateUserRequest, options?: any): AxiosPromise<ConfiguratorInternalApiAuthCreateUserResponse> {
            return localVarFp.createUser(form, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete role
         * @param {number} id id of a role to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete user
         * @param {number} id id of a user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list all the perms in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPerms(options?: any): AxiosPromise<Array<ConfiguratorInternalApiAuthListPermResponseItem>> {
            return localVarFp.listPerms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list all the roles in the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(options?: any): AxiosPromise<Array<ConfiguratorInternalApiAuthListRoleResponseItem>> {
            return localVarFp.listRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(options?: any): AxiosPromise<Array<ConfiguratorInternalApiAuthListUsersResponseItem>> {
            return localVarFp.listUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update role
         * @param {number} id id of a role to update
         * @param {ConfiguratorInternalApiAuthUpdateRoleRequest} form new role data to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(id: number, form: ConfiguratorInternalApiAuthUpdateRoleRequest, options?: any): AxiosPromise<object> {
            return localVarFp.updateRole(id, form, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update user
         * @param {number} id id of a user to update
         * @param {ConfiguratorInternalApiAuthUpdateUserRequest} form create user request model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, form: ConfiguratorInternalApiAuthUpdateUserRequest, options?: any): AxiosPromise<object> {
            return localVarFp.updateUser(id, form, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary create user
     * @param {ConfiguratorInternalApiAuthAuthRequest} form login/pass form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public auth(form: ConfiguratorInternalApiAuthAuthRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).auth(form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create role
     * @param {ConfiguratorInternalApiAuthRoleCreateRequest} form create role form
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createRole(form: ConfiguratorInternalApiAuthRoleCreateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createRole(form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create user
     * @param {ConfiguratorInternalApiAuthCreateUserRequest} form create user request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(form: ConfiguratorInternalApiAuthCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete role
     * @param {number} id id of a role to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteRole(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteRole(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete user
     * @param {number} id id of a user to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list all the perms in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listPerms(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listPerms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list all the roles in the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listRoles(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update role
     * @param {number} id id of a role to update
     * @param {ConfiguratorInternalApiAuthUpdateRoleRequest} form new role data to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateRole(id: number, form: ConfiguratorInternalApiAuthUpdateRoleRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateRole(id, form, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update user
     * @param {number} id id of a user to update
     * @param {ConfiguratorInternalApiAuthUpdateUserRequest} form create user request model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(id: number, form: ConfiguratorInternalApiAuthUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(id, form, options).then((request) => request(this.axios, this.basePath));
    }
}


