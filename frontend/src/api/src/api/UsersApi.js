/**
 * IntTest configurator
 * idk what to write here it's just a swagger
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiErrResponse from '../model/ApiErrResponse';
import ConfiguratorInternalApiAuthAuthRequest from '../model/ConfiguratorInternalApiAuthAuthRequest';
import ConfiguratorInternalApiAuthCreateUserRequest from '../model/ConfiguratorInternalApiAuthCreateUserRequest';
import ConfiguratorInternalApiAuthCreateUserResponse from '../model/ConfiguratorInternalApiAuthCreateUserResponse';
import ConfiguratorInternalApiAuthListPermResponseItem from '../model/ConfiguratorInternalApiAuthListPermResponseItem';
import ConfiguratorInternalApiAuthListRoleResponseItem from '../model/ConfiguratorInternalApiAuthListRoleResponseItem';
import ConfiguratorInternalApiAuthListUsersResponseItem from '../model/ConfiguratorInternalApiAuthListUsersResponseItem';
import ConfiguratorInternalApiAuthRoleCreateRequest from '../model/ConfiguratorInternalApiAuthRoleCreateRequest';
import ConfiguratorInternalApiAuthRoleCreateResponse from '../model/ConfiguratorInternalApiAuthRoleCreateResponse';
import ConfiguratorInternalApiAuthUpdateRoleRequest from '../model/ConfiguratorInternalApiAuthUpdateRoleRequest';
import ConfiguratorInternalApiAuthUpdateUserRequest from '../model/ConfiguratorInternalApiAuthUpdateUserRequest';

/**
* Users service.
* @module api/UsersApi
* @version 2.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the auth operation.
     * @callback module:api/UsersApi~authCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create user
     * @param {module:model/ConfiguratorInternalApiAuthAuthRequest} form login/pass form
     * @param {module:api/UsersApi~authCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    auth(form, callback) {
      let postBody = form;
      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling auth");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/UsersApi~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfiguratorInternalApiAuthRoleCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create role
     * @param {module:model/ConfiguratorInternalApiAuthRoleCreateRequest} form create role form
     * @param {module:api/UsersApi~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfiguratorInternalApiAuthRoleCreateResponse}
     */
    createRole(form, callback) {
      let postBody = form;
      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfiguratorInternalApiAuthRoleCreateResponse;
      return this.apiClient.callApi(
        '/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UsersApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfiguratorInternalApiAuthCreateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create user
     * @param {module:model/ConfiguratorInternalApiAuthCreateUserRequest} form create user request model
     * @param {module:api/UsersApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfiguratorInternalApiAuthCreateUserResponse}
     */
    createUser(form, callback) {
      let postBody = form;
      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfiguratorInternalApiAuthCreateUserResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/UsersApi~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete role
     * @param {Number} id id of a role to delete
     * @param {module:api/UsersApi~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRole(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete user
     * @param {Number} id id of a user to delete
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPerms operation.
     * @callback module:api/UsersApi~listPermsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfiguratorInternalApiAuthListPermResponseItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all the perms in the system
     * @param {module:api/UsersApi~listPermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfiguratorInternalApiAuthListPermResponseItem>}
     */
    listPerms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfiguratorInternalApiAuthListPermResponseItem];
      return this.apiClient.callApi(
        '/perms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/UsersApi~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfiguratorInternalApiAuthListRoleResponseItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all the roles in the system
     * @param {module:api/UsersApi~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfiguratorInternalApiAuthListRoleResponseItem>}
     */
    listRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfiguratorInternalApiAuthListRoleResponseItem];
      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsers operation.
     * @callback module:api/UsersApi~listUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConfiguratorInternalApiAuthListUsersResponseItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create user
     * @param {module:api/UsersApi~listUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConfiguratorInternalApiAuthListUsersResponseItem>}
     */
    listUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ConfiguratorInternalApiAuthListUsersResponseItem];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRole operation.
     * @callback module:api/UsersApi~updateRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update role
     * @param {Number} id id of a role to update
     * @param {module:model/ConfiguratorInternalApiAuthUpdateRoleRequest} form new role data to store
     * @param {module:api/UsersApi~updateRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateRole(id, form, callback) {
      let postBody = form;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRole");
      }
      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateRole");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update user
     * @param {Number} id id of a user to update
     * @param {module:model/ConfiguratorInternalApiAuthUpdateUserRequest} form create user request model
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateUser(id, form, callback) {
      let postBody = form;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }
      // verify the required parameter 'form' is set
      if (form === undefined || form === null) {
        throw new Error("Missing the required parameter 'form' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
